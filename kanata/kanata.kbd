(defsrc
esc
f1
			3 	9 0
tab  	q	w	e	r	t			y	u	i	o	p	[	]

caps	a	s	d	f	g			h	j	k	l	;	'	ret

lsft	z	x	c	v	b			n	m	,	.	/	rsft
						
					lalt	spc		
	
)

(defvar
  tap-timeout   1
  hold-timeout  140
  tt $tap-timeout
  ht $hold-timeout
)
(deflayer base

caps
lrld
			lmet		lmet S-; 

tab  	q	w	e	r	t			y	u	i	o	p lctrl lalt

@caps2esc	a	s	d	f	g			h	j	k	l	@rsftmod	@tmuxmod		ret

lsft	z	x	c	v	b			n	m	,	.	/	rsft
						
				lalt		@symbollayer		
	
)

(deflayer symbols
caps
lrld
							_  _ _
 caps		1	2	3	4	5			`	-	=	[	]	lctrl	lalt

 lctrl		6	7	8	9	0			lft	down	up	rght	@shiftslayer bspc	ret

 @shiftslayer 		z	x	c	v				b	\	m	,	.	/ @shiftslayer

 				lalt			spc	
)  

(deflayer shiftsymbols 
caps
lrld
					_  _ _
 tab		RS-1	RS-2	RS-3	RS-4	RS-5			RS-`		RS--	RS-=	RS-[	RS-] [	]
 
 @caps2esc		RS-6	RS-7	RS-8	RS-9	RS-0			h	j	k	l	;	'  ret

 lsft 		z	x	c	v	b				RS-\	m , . /	lsft

 				lalt		spc	
)



(defalias
	esc2caps(tap-hold $tt $ht esc lctrl)
	caps2esc(tap-hold $tt $ht esc lctrl)
	;;vimmod(tap-hold $tt $ht ; S-;)
  ;;vimallayer(tap-hold $tt $ht ; (layer-while-help vimlayer))
  rsftmod(tap-hold $tt $ht ; rsft)
	tmuxmod(tap-hold $tt $ht ' C-b)
	ninemet(tap-hold $tt $ht 9 lmet)
	threemet(tap-hold $tt $ht 3 lmet)
	laltmet(tap-hold $tt $ht lalt lmet)
	bracketctrl(tap-hold $tt $ht [ lctrl)
	bracketalt(tap-hold $tt $ht ] lalt )
	slashmet(tap-hold $tt $ht / lmet )
	symbollayer(tap-hold $tt $ht spc (layer-while-held symbols))
	shiftslayer(tap-hold $tt $ht spc (layer-while-held shiftsymbols))
)








































































